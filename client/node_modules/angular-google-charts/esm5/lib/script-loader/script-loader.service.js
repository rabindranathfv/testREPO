/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, LOCALE_ID, Optional } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { GOOGLE_API_KEY } from '../models/injection-tokens.model';
var ScriptLoaderService = /** @class */ (function () {
    function ScriptLoaderService(localeId, googleApiKey) {
        this.localeId = localeId;
        this.googleApiKey = googleApiKey;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.onLoadSubject = new Subject();
        this.initialize();
    }
    Object.defineProperty(ScriptLoaderService.prototype, "onReady", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.doneLoading) {
                return Observable.create(function (observer) {
                    observer.next(true);
                    observer.complete();
                });
            }
            return this.onLoadSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScriptLoaderService.prototype, "doneLoading", {
        get: /**
         * @return {?}
         */
        function () {
            if (typeof (google) === 'undefined' || typeof (google.charts) === 'undefined') {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScriptLoaderService.prototype, "isLoading", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.doneLoading) {
                return false;
            }
            /** @type {?} */
            var pageScripts = Array.from(document.getElementsByTagName('script'));
            /** @type {?} */
            var googleChartsScript = pageScripts.find(function (script) { return script.src === _this.scriptSource; });
            return googleChartsScript !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} packages
     * @return {?}
     */
    ScriptLoaderService.prototype.loadChartPackages = /**
     * @param {?} packages
     * @return {?}
     */
    function (packages) {
        var _this = this;
        return Observable.create(function (observer) {
            /** @type {?} */
            var config = {
                packages: packages,
                language: _this.localeId,
                mapsApiKey: _this.googleApiKey
            };
            google.charts.load('45.2', config);
            google.charts.setOnLoadCallback(function () {
                observer.next();
                observer.complete();
            });
        });
    };
    /**
     * @private
     * @return {?}
     */
    ScriptLoaderService.prototype.initialize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.doneLoading && !this.isLoading) {
            /** @type {?} */
            var script = this.createScriptElement();
            script.onload = function () {
                _this.onLoadSubject.next(true);
                _this.onLoadSubject.complete();
            };
            script.onerror = function () {
                console.error('Failed to load the google chart script!');
                _this.onLoadSubject.error('Failed to load the google chart script!');
                _this.onLoadSubject.complete();
            };
        }
    };
    /**
     * @private
     * @return {?}
     */
    ScriptLoaderService.prototype.createScriptElement = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    };
    ScriptLoaderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ScriptLoaderService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: String, decorators: [{ type: Inject, args: [GOOGLE_API_KEY,] }, { type: Optional }] }
    ]; };
    return ScriptLoaderService;
}());
export { ScriptLoaderService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.scriptSource;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.onLoadSubject;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.googleApiKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWxvYWRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1nb29nbGUtY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL3NjcmlwdC1sb2FkZXIvc2NyaXB0LWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUVsRTtJQU1FLDZCQUM2QixRQUFnQixFQUNDLFlBQXFCO1FBRHRDLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDQyxpQkFBWSxHQUFaLFlBQVksQ0FBUztRQU5sRCxpQkFBWSxHQUFHLDBDQUEwQyxDQUFDO1FBRW5FLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQU03QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELHNCQUFXLHdDQUFPOzs7O1FBQWxCO1lBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNwQixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQSxRQUFRO29CQUMvQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNwQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3RCLENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFFRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0MsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyw0Q0FBVzs7OztRQUF0QjtZQUNFLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFdBQVcsSUFBSSxPQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFL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SW5qZWN0YWJsZSwgSW5qZWN0LCBMT0NBTEVfSUQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEdPT0dMRV9BUElfS0VZIH0gZnJvbSAnLi4vbW9kZWxzL2luamVjdGlvbi10b2tlbnMubW9kZWwnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2NyaXB0TG9hZGVyU2VydmljZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JpcHRTb3VyY2UgPSAnaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vY2hhcnRzL2xvYWRlci5qcyc7XHJcblxyXG4gIHByaXZhdGUgb25Mb2FkU3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQEluamVjdChMT0NBTEVfSUQpIHByaXZhdGUgbG9jYWxlSWQ6IHN0cmluZyxcclxuICAgIEBJbmplY3QoR09PR0xFX0FQSV9LRVkpIEBPcHRpb25hbCgpIHByaXZhdGUgZ29vZ2xlQXBpS2V5Pzogc3RyaW5nXHJcbiAgKSB7XHJcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgb25SZWFkeSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGlmICh0aGlzLmRvbmVMb2FkaW5nKSB7XHJcbiAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShvYnNlcnZlciA9PiB7XHJcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cnVlKTtcclxuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5vbkxvYWRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkb25lTG9hZGluZygpOiBib29sZWFuIHtcclxuICAgIGlmICh0eXBlb2YoZ29vZ2xlKSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mKGdvb2dsZS5jaGFydHMpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldCBpc0xvYWRpbmcoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5kb25lTG9hZGluZykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcGFnZVNjcmlwdHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKSk7XHJcbiAgICBjb25zdCBnb29nbGVDaGFydHNTY3JpcHQgPSBwYWdlU2NyaXB0cy5maW5kKHNjcmlwdCA9PiBzY3JpcHQuc3JjID09PSB0aGlzLnNjcmlwdFNvdXJjZSk7XHJcbiAgICByZXR1cm4gZ29vZ2xlQ2hhcnRzU2NyaXB0ICE9PSB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbG9hZENoYXJ0UGFja2FnZXMocGFja2FnZXM6IEFycmF5PHN0cmluZz4pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IHtcclxuICAgICAgY29uc3QgY29uZmlnID0ge1xyXG4gICAgICAgIHBhY2thZ2VzOiBwYWNrYWdlcyxcclxuICAgICAgICBsYW5ndWFnZTogdGhpcy5sb2NhbGVJZCxcclxuICAgICAgICBtYXBzQXBpS2V5OiB0aGlzLmdvb2dsZUFwaUtleVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgZ29vZ2xlLmNoYXJ0cy5sb2FkKCc0NS4yJywgY29uZmlnKTtcclxuICAgICAgZ29vZ2xlLmNoYXJ0cy5zZXRPbkxvYWRDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xyXG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRpYWxpemUoKSB7XHJcbiAgICBpZiAoIXRoaXMuZG9uZUxvYWRpbmcgJiYgIXRoaXMuaXNMb2FkaW5nKSB7XHJcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuY3JlYXRlU2NyaXB0RWxlbWVudCgpO1xyXG5cclxuICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLm9uTG9hZFN1YmplY3QubmV4dCh0cnVlKTtcclxuICAgICAgICB0aGlzLm9uTG9hZFN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjcmlwdC5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHRoZSBnb29nbGUgY2hhcnQgc2NyaXB0IScpO1xyXG4gICAgICAgIHRoaXMub25Mb2FkU3ViamVjdC5lcnJvcignRmFpbGVkIHRvIGxvYWQgdGhlIGdvb2dsZSBjaGFydCBzY3JpcHQhJyk7XHJcbiAgICAgICAgdGhpcy5vbkxvYWRTdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVNjcmlwdEVsZW1lbnQoKTogSFRNTFNjcmlwdEVsZW1lbnQge1xyXG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgc2NyaXB0LnNyYyA9IHRoaXMuc2NyaXB0U291cmNlO1xyXG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgIHJldHVybiBzY3JpcHQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==