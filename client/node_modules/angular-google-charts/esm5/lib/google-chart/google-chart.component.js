/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/// <reference types="google.visualization"/>
/// <reference types="google.visualization"/>
import { Component, ElementRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { ScriptLoaderService } from '../script-loader/script-loader.service';
import { RawChartComponent } from '../raw-chart/raw-chart.component';
var GoogleChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(GoogleChartComponent, _super);
    function GoogleChartComponent(element, loaderService) {
        var _this = _super.call(this, element, loaderService) || this;
        _this.roles = new Array();
        _this.width = undefined;
        _this.height = undefined;
        _this.options = {};
        return _this;
    }
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.type == null) {
            throw new Error('Can\'t create a Google Chart without specifying a type!');
        }
        if (this.data == null) {
            throw new Error('Can\'t create a Google Chart without data!');
        }
        this.chartData = {
            chartType: this.type
        };
        this.loaderService.onReady.subscribe(function () {
            _this.createChart();
        });
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.wrapper) {
            this.chartData = {
                chartType: this.type,
                dataTable: this.getDataTable(),
                options: this.parseOptions()
            };
        }
        _super.prototype.ngOnChanges.call(this);
    };
    /**
     * @protected
     * @return {?}
     */
    GoogleChartComponent.prototype.parseOptions = /**
     * @protected
     * @return {?}
     */
    function () {
        return tslib_1.__assign({ title: this.title, width: this.width, height: this.height }, this.options);
    };
    /**
     * @protected
     * @return {?}
     */
    GoogleChartComponent.prototype.createChart = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadNeededPackages().subscribe(function () {
            _this.chartData = {
                chartType: _this.type,
                dataTable: _this.getDataTable(),
                options: _this.parseOptions()
            };
            _this.wrapper = new google.visualization.ChartWrapper();
            _this.updateChart();
        });
    };
    /**
     * @protected
     * @return {?}
     */
    GoogleChartComponent.prototype.getDataTable = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.columnNames) {
            /** @type {?} */
            var columns = this.parseRoles(this.columnNames);
            return google.visualization.arrayToDataTable(tslib_1.__spread([
                columns
            ], this.data), false);
        }
        else {
            return google.visualization.arrayToDataTable(this.data, true);
        }
    };
    /**
     * @private
     * @param {?} columnNames
     * @return {?}
     */
    GoogleChartComponent.prototype.parseRoles = /**
     * @private
     * @param {?} columnNames
     * @return {?}
     */
    function (columnNames) {
        var _this = this;
        /** @type {?} */
        var columnNamesWithRoles = columnNames.slice();
        if (this.roles) {
            this.roles.forEach(function (role) {
                var e_1, _a;
                /** @type {?} */
                var roleData = {
                    type: role.type,
                    role: role.role
                };
                if (role.p) {
                    roleData.p = role.p;
                }
                if (role.index != null) {
                    columnNamesWithRoles.splice(role.index + 1, 0, roleData);
                    try {
                        for (var _b = tslib_1.__values(_this.roles), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var otherRole = _c.value;
                            if (otherRole === role) {
                                continue;
                            }
                            if (otherRole.index > role.index) {
                                otherRole.index++;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    columnNamesWithRoles.push(roleData);
                }
            });
        }
        return columnNamesWithRoles;
    };
    GoogleChartComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'google-chart',
                    template: '',
                    exportAs: 'google-chart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [':host { width: fit-content; display: block; }']
                }] }
    ];
    /** @nocollapse */
    GoogleChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScriptLoaderService }
    ]; };
    GoogleChartComponent.propDecorators = {
        data: [{ type: Input }],
        columnNames: [{ type: Input }],
        roles: [{ type: Input }],
        title: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        options: [{ type: Input }],
        type: [{ type: Input }]
    };
    return GoogleChartComponent;
}(RawChartComponent));
export { GoogleChartComponent };
if (false) {
    /** @type {?} */
    GoogleChartComponent.prototype.data;
    /** @type {?} */
    GoogleChartComponent.prototype.columnNames;
    /** @type {?} */
    GoogleChartComponent.prototype.roles;
    /** @type {?} */
    GoogleChartComponent.prototype.title;
    /** @type {?} */
    GoogleChartComponent.prototype.width;
    /** @type {?} */
    GoogleChartComponent.prototype.height;
    /** @type {?} */
    GoogleChartComponent.prototype.options;
    /** @type {?} */
    GoogleChartComponent.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,