/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, LOCALE_ID } from '@angular/core';
import { ScriptLoaderService } from './script-loader/script-loader.service';
import { RawChartComponent } from './raw-chart/raw-chart.component';
import { GoogleChartComponent } from './google-chart/google-chart.component';
import { GOOGLE_API_KEY } from './models/injection-tokens.model';
/** @type {?} */
export var GOOGLE_CHARTS_PROVIDERS = [
    {
        provide: ScriptLoaderService,
        useFactory: setupScriptLoaderService,
        deps: [
            LOCALE_ID, GOOGLE_API_KEY
        ]
    }
];
var GoogleChartsModule = /** @class */ (function () {
    function GoogleChartsModule() {
    }
    /**
     * @param {?=} googleApiKey
     * @return {?}
     */
    GoogleChartsModule.forRoot = /**
     * @param {?=} googleApiKey
     * @return {?}
     */
    function (googleApiKey) {
        return {
            ngModule: GoogleChartsModule,
            providers: [
                GOOGLE_CHARTS_PROVIDERS,
                { provide: GOOGLE_API_KEY, useValue: googleApiKey ? googleApiKey : '' }
            ]
        };
    };
    GoogleChartsModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        ScriptLoaderService
                    ],
                    declarations: [
                        GoogleChartComponent,
                        RawChartComponent
                    ],
                    exports: [
                        GoogleChartComponent,
                        RawChartComponent
                    ]
                },] }
    ];
    return GoogleChartsModule;
}());
export { GoogleChartsModule };
/**
 * @param {?} localeId
 * @param {?} googleApiKey
 * @return {?}
 */
export function setupScriptLoaderService(localeId, googleApiKey) {
    return new ScriptLoaderService(localeId, googleApiKey);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWdvb2dsZS1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvZ29vZ2xlLWNoYXJ0cy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVksU0FBUyxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUVuRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7O0FBRWpFLE1BQU0sS0FBTyx1QkFBdUIsR0FBZTtJQUNqRDtRQUNFLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsVUFBVSxFQUFFLHdCQUF3QjtRQUNwQyxJQUFJLEVBQUU7WUFDSixTQUFTLEVBQUUsY0FBYztTQUMxQjtLQUNGO0NBQ0Y7QUFFRDtJQUFBO0lBdUJBLENBQUM7Ozs7O0lBVGUsMEJBQU87Ozs7SUFBckIsVUFBc0IsWUFBcUI7UUFDekMsT0FBTztZQUNMLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFO2dCQUNULHVCQUF1QjtnQkFDdkIsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2FBQ3hFO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQXRCRixRQUFRLFNBQUM7b0JBQ1IsU0FBUyxFQUFFO3dCQUNULG1CQUFtQjtxQkFDcEI7b0JBQ0QsWUFBWSxFQUFFO3dCQUNaLG9CQUFvQjt3QkFDcEIsaUJBQWlCO3FCQUNsQjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1Asb0JBQW9CO3dCQUNwQixpQkFBaUI7cUJBQ2xCO2lCQUNGOztJQVdELHlCQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0FWWSxrQkFBa0I7Ozs7OztBQVkvQixNQUFNLFVBQVUsd0JBQXdCLENBQUMsUUFBZ0IsRUFBRSxZQUFvQjtJQUM3RSxPQUFPLElBQUksbUJBQW1CLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgUHJvdmlkZXIsIExPQ0FMRV9JRCwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU2NyaXB0TG9hZGVyU2VydmljZSB9IGZyb20gJy4vc2NyaXB0LWxvYWRlci9zY3JpcHQtbG9hZGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSYXdDaGFydENvbXBvbmVudCB9IGZyb20gJy4vcmF3LWNoYXJ0L3Jhdy1jaGFydC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHb29nbGVDaGFydENvbXBvbmVudCB9IGZyb20gJy4vZ29vZ2xlLWNoYXJ0L2dvb2dsZS1jaGFydC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHT09HTEVfQVBJX0tFWSB9IGZyb20gJy4vbW9kZWxzL2luamVjdGlvbi10b2tlbnMubW9kZWwnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdPT0dMRV9DSEFSVFNfUFJPVklERVJTOiBQcm92aWRlcltdID0gW1xyXG4gIHtcclxuICAgIHByb3ZpZGU6IFNjcmlwdExvYWRlclNlcnZpY2UsXHJcbiAgICB1c2VGYWN0b3J5OiBzZXR1cFNjcmlwdExvYWRlclNlcnZpY2UsXHJcbiAgICBkZXBzOiBbXHJcbiAgICAgIExPQ0FMRV9JRCwgR09PR0xFX0FQSV9LRVlcclxuICAgIF1cclxuICB9XHJcbl07XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgU2NyaXB0TG9hZGVyU2VydmljZVxyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBHb29nbGVDaGFydENvbXBvbmVudCxcclxuICAgIFJhd0NoYXJ0Q29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBHb29nbGVDaGFydENvbXBvbmVudCxcclxuICAgIFJhd0NoYXJ0Q29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2hhcnRzTW9kdWxlIHtcclxuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoZ29vZ2xlQXBpS2V5Pzogc3RyaW5nKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogR29vZ2xlQ2hhcnRzTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBHT09HTEVfQ0hBUlRTX1BST1ZJREVSUyxcclxuICAgICAgICB7IHByb3ZpZGU6IEdPT0dMRV9BUElfS0VZLCB1c2VWYWx1ZTogZ29vZ2xlQXBpS2V5ID8gZ29vZ2xlQXBpS2V5IDogJycgfVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU2NyaXB0TG9hZGVyU2VydmljZShsb2NhbGVJZDogc3RyaW5nLCBnb29nbGVBcGlLZXk6IHN0cmluZyk6IFNjcmlwdExvYWRlclNlcnZpY2Uge1xyXG4gIHJldHVybiBuZXcgU2NyaXB0TG9hZGVyU2VydmljZShsb2NhbGVJZCwgZ29vZ2xlQXBpS2V5KTtcclxufVxyXG4iXX0=