/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, LOCALE_ID } from '@angular/core';
import { ScriptLoaderService } from './script-loader/script-loader.service';
import { RawChartComponent } from './raw-chart/raw-chart.component';
import { GoogleChartComponent } from './google-chart/google-chart.component';
import { GOOGLE_API_KEY } from './models/injection-tokens.model';
/** @type {?} */
export const GOOGLE_CHARTS_PROVIDERS = [
    {
        provide: ScriptLoaderService,
        useFactory: setupScriptLoaderService,
        deps: [
            LOCALE_ID, GOOGLE_API_KEY
        ]
    }
];
export class GoogleChartsModule {
    /**
     * @param {?=} googleApiKey
     * @return {?}
     */
    static forRoot(googleApiKey) {
        return {
            ngModule: GoogleChartsModule,
            providers: [
                GOOGLE_CHARTS_PROVIDERS,
                { provide: GOOGLE_API_KEY, useValue: googleApiKey ? googleApiKey : '' }
            ]
        };
    }
}
GoogleChartsModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    ScriptLoaderService
                ],
                declarations: [
                    GoogleChartComponent,
                    RawChartComponent
                ],
                exports: [
                    GoogleChartComponent,
                    RawChartComponent
                ]
            },] }
];
/**
 * @param {?} localeId
 * @param {?} googleApiKey
 * @return {?}
 */
export function setupScriptLoaderService(localeId, googleApiKey) {
    return new ScriptLoaderService(localeId, googleApiKey);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWdvb2dsZS1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvZ29vZ2xlLWNoYXJ0cy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVksU0FBUyxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUVuRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7O0FBRWpFLE1BQU0sT0FBTyx1QkFBdUIsR0FBZTtJQUNqRDtRQUNFLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsVUFBVSxFQUFFLHdCQUF3QjtRQUNwQyxJQUFJLEVBQUU7WUFDSixTQUFTLEVBQUUsY0FBYztTQUMxQjtLQUNGO0NBQ0Y7QUFlRCxNQUFNLE9BQU8sa0JBQWtCOzs7OztJQUN0QixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQXFCO1FBQ3pDLE9BQU87WUFDTCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRTtnQkFDVCx1QkFBdUI7Z0JBQ3ZCLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTthQUN4RTtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUF0QkYsUUFBUSxTQUFDO2dCQUNSLFNBQVMsRUFBRTtvQkFDVCxtQkFBbUI7aUJBQ3BCO2dCQUNELFlBQVksRUFBRTtvQkFDWixvQkFBb0I7b0JBQ3BCLGlCQUFpQjtpQkFDbEI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLG9CQUFvQjtvQkFDcEIsaUJBQWlCO2lCQUNsQjthQUNGOzs7Ozs7O0FBYUQsTUFBTSxVQUFVLHdCQUF3QixDQUFDLFFBQWdCLEVBQUUsWUFBb0I7SUFDN0UsT0FBTyxJQUFJLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFByb3ZpZGVyLCBMT0NBTEVfSUQsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFNjcmlwdExvYWRlclNlcnZpY2UgfSBmcm9tICcuL3NjcmlwdC1sb2FkZXIvc2NyaXB0LWxvYWRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmF3Q2hhcnRDb21wb25lbnQgfSBmcm9tICcuL3Jhdy1jaGFydC9yYXctY2hhcnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgR29vZ2xlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuL2dvb2dsZS1jaGFydC9nb29nbGUtY2hhcnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgR09PR0xFX0FQSV9LRVkgfSBmcm9tICcuL21vZGVscy9pbmplY3Rpb24tdG9rZW5zLm1vZGVsJztcclxuXHJcbmV4cG9ydCBjb25zdCBHT09HTEVfQ0hBUlRTX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcclxuICB7XHJcbiAgICBwcm92aWRlOiBTY3JpcHRMb2FkZXJTZXJ2aWNlLFxyXG4gICAgdXNlRmFjdG9yeTogc2V0dXBTY3JpcHRMb2FkZXJTZXJ2aWNlLFxyXG4gICAgZGVwczogW1xyXG4gICAgICBMT0NBTEVfSUQsIEdPT0dMRV9BUElfS0VZXHJcbiAgICBdXHJcbiAgfVxyXG5dO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBwcm92aWRlcnM6IFtcclxuICAgIFNjcmlwdExvYWRlclNlcnZpY2VcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgR29vZ2xlQ2hhcnRDb21wb25lbnQsXHJcbiAgICBSYXdDaGFydENvbXBvbmVudFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgR29vZ2xlQ2hhcnRDb21wb25lbnQsXHJcbiAgICBSYXdDaGFydENvbXBvbmVudFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEdvb2dsZUNoYXJ0c01vZHVsZSB7XHJcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KGdvb2dsZUFwaUtleT86IHN0cmluZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IEdvb2dsZUNoYXJ0c01vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgR09PR0xFX0NIQVJUU19QUk9WSURFUlMsXHJcbiAgICAgICAgeyBwcm92aWRlOiBHT09HTEVfQVBJX0tFWSwgdXNlVmFsdWU6IGdvb2dsZUFwaUtleSA/IGdvb2dsZUFwaUtleSA6ICcnIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFNjcmlwdExvYWRlclNlcnZpY2UobG9jYWxlSWQ6IHN0cmluZywgZ29vZ2xlQXBpS2V5OiBzdHJpbmcpOiBTY3JpcHRMb2FkZXJTZXJ2aWNlIHtcclxuICByZXR1cm4gbmV3IFNjcmlwdExvYWRlclNlcnZpY2UobG9jYWxlSWQsIGdvb2dsZUFwaUtleSk7XHJcbn1cclxuIl19