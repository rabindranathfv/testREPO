import { Component, ViewChild, Input, Directive, ViewContainerRef, ComponentFactoryResolver, NgModule } from '@angular/core';
import { MatSort, MatPaginator, MatDialog, MatDialogConfig, MatTableModule, MatSortModule, MatPaginatorModule, MatIconModule, MatDialogModule, MatTooltipModule } from '@angular/material';
import '@angular/cdk/table';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnFilter {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnFilterService {
    constructor() {
        this.registeredFilters = {};
    }
    /**
     * @param {?} type
     * @param {?} component
     * @return {?}
     */
    registerFilter(type, component) {
        this.registeredFilters[type] = component;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getFilter(type) {
        /** @type {?} */
        const component = this.registeredFilters[type];
        return component;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicTableComponent {
    /**
     * @param {?} columnFilterService
     * @param {?} dialog
     */
    constructor(columnFilterService, dialog) {
        this.columnFilterService = columnFilterService;
        this.dialog = dialog;
        this.pageSize = 20;
        this.pageSizeOptions = [20, 50, 100];
        this.showFilters = true;
        this.stickyHeader = false;
        this.appliedFilters = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.dataSource == null) {
            throw Error('DynamicTable must be provided with data source.');
        }
        if (this.columns == null) {
            throw Error('DynamicTable must be provided with column definitions.');
        }
        if (this.paginator === undefined) {
            this.paginator = this.internalPaginator;
        }
        this.displayedColumns = this.columns.map((column, index) => this.prepareColumnName(column.name, index));
        /** @type {?} */
        const dataSource = (/** @type {?} */ (this.dataSource));
        dataSource.sort = this.sort;
        dataSource.paginator = this.paginator;
    }
    /**
     * @return {?}
     */
    isUsingInternalPaginator() {
        return this.paginator === this.internalPaginator;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    canFilter(column) {
        /** @type {?} */
        const filter = this.columnFilterService.getFilter(column.type);
        return filter != null;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    isFiltered(column) {
        return this.appliedFilters[column.name];
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getFilterDescription(column) {
        /** @type {?} */
        const filter = this.appliedFilters[column.name];
        if (!filter || !filter.getDescription) {
            return null;
        }
        return filter.getDescription();
    }
    /**
     * @param {?} name
     * @param {?} columnNumber
     * @return {?}
     */
    prepareColumnName(name, columnNumber) {
        return name || 'col' + columnNumber;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    filter(column) {
        /** @type {?} */
        const filter = this.columnFilterService.getFilter(column.type);
        if (filter) {
            /** @type {?} */
            const dialogConfig = new MatDialogConfig();
            /** @type {?} */
            const columnFilter = new ColumnFilter();
            columnFilter.column = column;
            if (this.appliedFilters[column.name]) {
                columnFilter.filter = Object.create(this.appliedFilters[column.name]);
            }
            dialogConfig.data = columnFilter;
            /** @type {?} */
            const dialogRef = this.dialog.open(filter, dialogConfig);
            dialogRef.afterClosed().subscribe(result => {
                if (result) {
                    this.appliedFilters[column.name] = result;
                }
                else if (result === '') {
                    delete this.appliedFilters[column.name];
                }
                if (result || result === '') {
                    this.updateDataSource();
                }
            });
        }
    }
    /**
     * @return {?}
     */
    clearFilters() {
        this.appliedFilters = {};
        this.updateDataSource();
    }
    /**
     * @protected
     * @return {?}
     */
    updateDataSource() {
        /** @type {?} */
        const dataSource = (/** @type {?} */ (this.dataSource));
        dataSource.filters = this.getFilters();
    }
    /**
     * @return {?}
     */
    getFilters() {
        /** @type {?} */
        const filters = this.appliedFilters;
        /** @type {?} */
        const filterArray = Object.keys(filters).map((key) => filters[key]);
        return filterArray;
    }
    /**
     * @param {?} columnName
     * @return {?}
     */
    getFilter(columnName) {
        /** @type {?} */
        const filterColumn = this.getColumnByName(columnName);
        if (!filterColumn) {
            throw Error(`Column with name '${columnName}' does not exist.`);
        }
        return this.appliedFilters[filterColumn.name];
    }
    /**
     * @param {?} columnName
     * @param {?} filter
     * @return {?}
     */
    setFilter(columnName, filter) {
        /** @type {?} */
        const filterColumn = this.getColumnByName(columnName);
        if (!filterColumn) {
            throw Error(`Cannot set filter for a column. Column with name '${columnName}' does not exist.`);
        }
        this.appliedFilters[filterColumn.name] = filter;
        this.updateDataSource();
    }
    /**
     * @private
     * @param {?} columnName
     * @return {?}
     */
    getColumnByName(columnName) {
        return this.columns.find(c => (c.name ? c.name.toLowerCase() : c.name) === (columnName ? columnName.toLowerCase() : columnName));
    }
}
DynamicTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdt-dynamic-table',
                template: "<table mat-table [dataSource]=\"dataSource\"\r\n       matSort matSortDirection=\"asc\">\r\n\r\n  <ng-container *ngFor=\"let column of columns; let i = index\" matColumnDef=\"{{ prepareColumnName(column.name, i) }}\"\r\n                [sticky]=\"column.sticky === 'start'\" [stickyEnd]=\"column.sticky === 'end'\">\r\n    <th mat-header-cell *matHeaderCellDef mat-sort-header=\"{{ prepareColumnName(column.name, i) }}\" [disabled]=\"!column.name || column.sort === false\">\r\n      {{ column.displayName }}\r\n      <button class=\"mat-sort-header-button\" *ngIf=\"showFilters && canFilter(column)\"\r\n              (click)=\"filter(column); $event.stopPropagation();\"\r\n              matTooltip=\"{{ getFilterDescription(column) }}\" matTooltipDisabled=\"{{ !getFilterDescription(column) }}\">\r\n        <mat-icon color=\"{{ isFiltered(column) ? 'primary' : 'default' }}\">filter_list</mat-icon>\r\n      </button>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let row\"><mdt-table-cell [row]=\"row\" [column]=\"column\"></mdt-table-cell></td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: [stickyHeader]\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n<mat-paginator [hidden]=\"!isUsingInternalPaginator()\" [pageSize]=\"pageSize\"\r\n               [pageSizeOptions]=\"pageSizeOptions\">\r\n</mat-paginator>",
                styles: ["table{width:100%}th .mat-icon.mat-default{opacity:.54}th .mat-icon.mat-default:hover{opacity:1}[hidden]{display:none}"]
            }] }
];
/** @nocollapse */
DynamicTableComponent.ctorParameters = () => [
    { type: ColumnFilterService },
    { type: MatDialog }
];
DynamicTableComponent.propDecorators = {
    columns: [{ type: Input }],
    dataSource: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageSizeOptions: [{ type: Input }],
    showFilters: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    paginator: [{ type: Input }],
    sort: [{ type: ViewChild, args: [MatSort,] }],
    internalPaginator: [{ type: ViewChild, args: [MatPaginator,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CellDirective {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
}
CellDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mdtCellHost]',
            },] }
];
/** @nocollapse */
CellDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnConfig {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextCellComponent {
}
TextCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdt-text-cell',
                template: '{{ row[column.name] }}'
            }] }
];
TextCellComponent.propDecorators = {
    column: [{ type: Input }],
    row: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CellService {
    constructor() {
        this.registeredCells = {};
    }
    /**
     * @param {?} type
     * @param {?} component
     * @return {?}
     */
    registerCell(type, component) {
        this.registeredCells[type] = component;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getCell(type) {
        /** @type {?} */
        const component = this.registeredCells[type];
        if (component == null) {
            return TextCellComponent;
        }
        return component;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableCellComponent {
    /**
     * @param {?} cellService
     * @param {?} componentFactoryResolver
     */
    constructor(cellService, componentFactoryResolver) {
        this.cellService = cellService;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initCell();
    }
    /**
     * @return {?}
     */
    initCell() {
        /** @type {?} */
        const cellComponent = this.cellService.getCell(this.column.type);
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(cellComponent);
        /** @type {?} */
        const viewContainerRef = this.cellHost.viewContainerRef;
        viewContainerRef.clear();
        /** @type {?} */
        const componentRef = viewContainerRef.createComponent(componentFactory);
        /** @type {?} */
        const cell = (/** @type {?} */ (componentRef.instance));
        cell.row = this.row;
        cell.column = this.column;
    }
}
TableCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdt-table-cell',
                template: '<ng-template mdtCellHost></ng-template>'
            }] }
];
/** @nocollapse */
TableCellComponent.ctorParameters = () => [
    { type: CellService },
    { type: ComponentFactoryResolver }
];
TableCellComponent.propDecorators = {
    cellHost: [{ type: ViewChild, args: [CellDirective,] }],
    row: [{ type: Input }],
    column: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateCellComponent {
    constructor() {
        this.dateFormat = 'short';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.options) {
            if (this.column.options.dateFormat) {
                this.dateFormat = this.column.options.dateFormat;
            }
        }
    }
}
DateCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdt-date-cell',
                template: '{{ row[column.name] | date:dateFormat }}'
            }] }
];
DateCellComponent.propDecorators = {
    column: [{ type: Input }],
    row: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicTableModule {
    /**
     * @param {?} cellService
     */
    constructor(cellService) {
        this.cellService = cellService;
        cellService.registerCell('string', TextCellComponent);
        cellService.registerCell('date', DateCellComponent);
    }
}
DynamicTableModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MatTableModule,
                    MatSortModule,
                    MatPaginatorModule,
                    MatIconModule,
                    MatDialogModule,
                    MatTooltipModule
                ],
                declarations: [
                    DynamicTableComponent,
                    TableCellComponent,
                    CellDirective,
                    TextCellComponent,
                    DateCellComponent
                ],
                exports: [DynamicTableComponent],
                entryComponents: [
                    TextCellComponent,
                    DateCellComponent
                ],
                providers: [
                    CellService,
                    ColumnFilterService
                ]
            },] }
];
/** @nocollapse */
DynamicTableModule.ctorParameters = () => [
    { type: CellService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DynamicTableComponent, CellService, CellDirective, ColumnFilterService, ColumnFilter, ColumnConfig, DynamicTableModule, DateCellComponent as ɵc, TextCellComponent as ɵb, TableCellComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,