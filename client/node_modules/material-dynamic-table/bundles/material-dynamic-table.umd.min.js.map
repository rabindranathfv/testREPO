{"version":3,"sources":["ng://material-dynamic-table/lib/column-filter.model.ts","ng://material-dynamic-table/lib/table-cell/cell-types/column-filter.service.ts","ng://material-dynamic-table/lib/dynamic-table.component.ts","ng://material-dynamic-table/lib/table-cell/cell.directive.ts","ng://material-dynamic-table/lib/table-cell/cell-types/text-cell.component.ts","ng://material-dynamic-table/lib/table-cell/cell-types/cell.service.ts","ng://material-dynamic-table/lib/table-cell/table-cell.component.ts","ng://material-dynamic-table/lib/column-config.model.ts","ng://material-dynamic-table/lib/table-cell/cell-types/date-cell.component.ts","ng://material-dynamic-table/lib/dynamic-table.module.ts"],"names":["ColumnFilter","ColumnFilterService","this","registeredFilters","prototype","registerFilter","type","component","getFilter","DynamicTableComponent","columnFilterService","dialog","pageSize","pageSizeOptions","showFilters","stickyHeader","appliedFilters","ngOnInit","_this","dataSource","Error","columns","paginator","undefined","internalPaginator","displayedColumns","map","column","index","prepareColumnName","name","sort","isUsingInternalPaginator","canFilter","isFiltered","getFilterDescription","filter","getDescription","columnNumber","dialogConfig","MatDialogConfig","columnFilter","Object","create","data","open","afterClosed","subscribe","result","updateDataSource","clearFilters","filters","getFilters","keys","key","columnName","filterColumn","getColumnByName","setFilter","find","c","toLowerCase","Component","args","selector","template","MatDialog","Input","ViewChild","MatSort","MatPaginator","CellDirective","viewContainerRef","Directive","ViewContainerRef","TextCellComponent","CellService","registeredCells","registerCell","getCell","TableCellComponent","cellService","componentFactoryResolver","initCell","cellComponent","componentFactory","resolveComponentFactory","cellHost","clear","cell","createComponent","row","ComponentFactoryResolver","ColumnConfig","DateCellComponent","dateFormat","options","DynamicTableModule","NgModule","imports","CommonModule","MatTableModule","MatSortModule","MatPaginatorModule","MatIconModule","MatDialogModule","MatTooltipModule","declarations","exports","entryComponents","providers"],"mappings":"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","sourcesContent":["import { ColumnConfig } from './column-config.model';\n\nexport class ColumnFilter {\n    column: ColumnConfig;\n    filter: any;\n}","import { Type } from '@angular/core';\n\nexport class ColumnFilterService {\n\n    private registeredFilters: { [key: string]: Type<any>; } = {};\n    \n    registerFilter(type: string, component: Type<any>) {\n        this.registeredFilters[type] = component;\n    }\n\n    getFilter(type: string): Type<any> {\n        const component = this.registeredFilters[type];\n        \n        return component;\n    }\n}","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { MatSort, MatPaginator, MatDialog, MatDialogConfig } from '@angular/material';\nimport { DataSource } from '@angular/cdk/table';\nimport { ColumnConfig } from './column-config.model';\nimport { ColumnFilter } from './column-filter.model';\nimport { ColumnFilterService } from './table-cell/cell-types/column-filter.service';\n\n@Component({\n  selector: 'mdt-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  styleUrls: ['./dynamic-table.component.css']\n})\nexport class DynamicTableComponent implements OnInit {\n\n  @Input() columns: ColumnConfig[];\n  @Input() dataSource: DataSource<any>;\n  @Input() pageSize = 20;\n  @Input() pageSizeOptions = [20, 50, 100];\n  @Input() showFilters = true;\n  @Input() stickyHeader = false;\n  @Input() paginator: MatPaginator;\n\n  displayedColumns: string[];\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) private internalPaginator: MatPaginator;\n\n  private appliedFilters: { [key: string]: any; } = {};\n\n  constructor(private readonly columnFilterService: ColumnFilterService, private readonly dialog: MatDialog) { }\n\n  ngOnInit() {\n    if (this.dataSource == null) {\n      throw Error('DynamicTable must be provided with data source.');\n    }\n    if (this.columns == null) {\n      throw Error('DynamicTable must be provided with column definitions.');\n    }\n\n    if (this.paginator === undefined) {\n      this.paginator = this.internalPaginator;\n    }\n\n    this.displayedColumns = this.columns.map((column, index) => this.prepareColumnName(column.name, index));\n\n    const dataSource = this.dataSource as any;\n    dataSource.sort = this.sort;\n    dataSource.paginator = this.paginator;\n  }\n\n  isUsingInternalPaginator() {\n    return this.paginator === this.internalPaginator;\n  }\n\n  canFilter(column: ColumnConfig) {\n    const filter = this.columnFilterService.getFilter(column.type);\n\n    return filter != null;\n  }\n\n  isFiltered(column: ColumnConfig) {\n    return this.appliedFilters[column.name];\n  }\n\n  getFilterDescription(column: ColumnConfig) {\n    const filter = this.appliedFilters[column.name];\n    if (!filter || !filter.getDescription) {\n      return null;\n    }\n\n    return filter.getDescription();\n  }\n\n  prepareColumnName(name: string, columnNumber: number) {\n    return name || 'col' + columnNumber;\n  }\n\n  filter(column: ColumnConfig) {\n    const filter = this.columnFilterService.getFilter(column.type);\n\n    if (filter) {\n      const dialogConfig = new MatDialogConfig();\n      const columnFilter = new ColumnFilter();\n      columnFilter.column = column;\n\n      if (this.appliedFilters[column.name]) {\n        columnFilter.filter = Object.create(this.appliedFilters[column.name]);\n      }\n\n      dialogConfig.data = columnFilter;\n\n      const dialogRef = this.dialog.open(filter, dialogConfig);\n\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.appliedFilters[column.name] = result;\n        } else if (result === '') {\n          delete this.appliedFilters[column.name];\n        }\n\n        if (result || result === '') {\n          this.updateDataSource();\n        }\n      });\n    }\n  }\n\n  clearFilters() {\n    this.appliedFilters = {};\n    this.updateDataSource();\n  }\n\n  protected updateDataSource() {\n    const dataSource = this.dataSource as any;\n    dataSource.filters = this.getFilters();\n  }\n\n  getFilters() {\n    const filters = this.appliedFilters;\n    const filterArray = Object.keys(filters).map((key) => filters[key]);\n    return filterArray;\n  }\n\n  getFilter(columnName: string): any {\n    const filterColumn = this.getColumnByName(columnName);\n\n    if (!filterColumn) {\n      throw Error(`Column with name '${columnName}' does not exist.`);\n    }\n\n    return this.appliedFilters[filterColumn.name];\n  }\n\n  setFilter(columnName: string, filter: any) {\n    const filterColumn = this.getColumnByName(columnName);\n\n    if (!filterColumn) {\n      throw Error(`Cannot set filter for a column. Column with name '${columnName}' does not exist.`);\n    }\n\n    this.appliedFilters[filterColumn.name] = filter;\n    this.updateDataSource();\n  }\n\n  private getColumnByName(columnName: string): ColumnConfig {\n    return this.columns.find(c =>\n      (c.name ? c.name.toLowerCase() : c.name) === (columnName ? columnName.toLowerCase() : columnName)\n    );\n  }\n}","import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[mdtCellHost]',\n})\nexport class CellDirective {\n    constructor(public viewContainerRef: ViewContainerRef) {}\n}","import { Component, Input } from '@angular/core';\nimport { CellComponent } from './cell.component';\nimport { ColumnConfig } from '../../column-config.model';\n\n@Component({\n    selector: 'mdt-text-cell',\n    template: '{{ row[column.name] }}'\n})\nexport class TextCellComponent implements CellComponent {\n    @Input() column: ColumnConfig;\n    @Input() row: object;\n}","import { Type } from '@angular/core';\nimport { TextCellComponent } from './text-cell.component';\n\nexport class CellService {\n\n    private registeredCells: { [key: string]: Type<any>; } = {};\n    \n    registerCell(type: string, component: Type<any>) {\n        this.registeredCells[type] = component;\n    }\n\n    getCell(type: string): Type<any> {\n        const component = this.registeredCells[type];\n\n        if (component == null) {\n            return TextCellComponent;\n        }\n\n        return component;\n    }\n}","import { Component, ComponentFactoryResolver, Input, ViewChild, OnInit } from '@angular/core';\nimport { CellDirective } from './cell.directive';\nimport { CellService } from './cell-types/cell.service';\nimport { CellComponent } from './cell-types/cell.component';\nimport { ColumnConfig } from '../column-config.model';\n\n@Component({\n    selector: 'mdt-table-cell',\n    template: '<ng-template mdtCellHost></ng-template>'\n})\nexport class TableCellComponent implements OnInit {\n    @ViewChild(CellDirective) cellHost: CellDirective;\n\n    @Input() row: object;\n    @Input() column: ColumnConfig;\n\n    constructor(\n        private readonly cellService: CellService,\n        private readonly componentFactoryResolver: ComponentFactoryResolver) { }\n\n    ngOnInit() {\n        this.initCell();\n    }\n\n    initCell() {\n        const cellComponent = this.cellService.getCell(this.column.type);\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(cellComponent);\n        const viewContainerRef = this.cellHost.viewContainerRef;\n        viewContainerRef.clear();\n        const componentRef = viewContainerRef.createComponent(componentFactory);\n        const cell = componentRef.instance as CellComponent;\n        cell.row = this.row;\n        cell.column = this.column;\n    }\n}","export class ColumnConfig {\r\n    name?: string;\r\n    displayName?: string;\r\n    type: string;\r\n    options?: any;\r\n    sticky?: string;\r\n    sort?: boolean;\r\n}","import { Component, Input, OnInit } from '@angular/core';\nimport { CellComponent } from './cell.component';\nimport { ColumnConfig } from '../../column-config.model';\n\n@Component({\n    selector: 'mdt-date-cell',\n    template: '{{ row[column.name] | date:dateFormat }}'\n})\nexport class DateCellComponent implements CellComponent, OnInit {\n    @Input() column: ColumnConfig;\n    @Input() row: object;\n\n    dateFormat = 'short';\n\n    ngOnInit() {\n        if (this.column.options) {\n            if (this.column.options.dateFormat) {\n                this.dateFormat = this.column.options.dateFormat;\n            }\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  MatTableModule,\n  MatSortModule,\n  MatPaginatorModule,\n  MatIconModule,\n  MatDialogModule,\n  MatTooltipModule\n} from '@angular/material';\n\nimport { DynamicTableComponent } from './dynamic-table.component';\nimport { TableCellComponent } from './table-cell/table-cell.component';\n\nimport { CellService } from './table-cell/cell-types/cell.service';\nimport { CellDirective } from './table-cell/cell.directive';\nimport { ColumnFilterService } from './table-cell/cell-types/column-filter.service';\n\nexport { CellService, CellDirective, ColumnFilterService };\nexport { CellComponent } from './table-cell/cell-types/cell.component';\nexport { ColumnFilter } from './column-filter.model';\nexport { ColumnConfig } from './column-config.model';\nexport { FilterDescription } from './filter-description';\n\nimport { TextCellComponent } from './table-cell/cell-types/text-cell.component';\nimport { DateCellComponent } from './table-cell/cell-types/date-cell.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatIconModule,\n    MatDialogModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    DynamicTableComponent,\n    TableCellComponent,\n    CellDirective,\n    TextCellComponent,\n    DateCellComponent\n  ],\n  exports: [DynamicTableComponent],\n  entryComponents: [\n    TextCellComponent,\n    DateCellComponent\n  ],\n  providers: [\n    CellService,\n    ColumnFilterService\n  ]\n})\nexport class DynamicTableModule {\n  constructor(private readonly cellService: CellService) {\n    cellService.registerCell('string', TextCellComponent);\n    cellService.registerCell('date', DateCellComponent);\n  }\n}\n"]}