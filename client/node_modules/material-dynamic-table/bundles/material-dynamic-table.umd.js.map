{"version":3,"file":"material-dynamic-table.umd.js.map","sources":["ng://material-dynamic-table/lib/column-filter.model.ts","ng://material-dynamic-table/lib/table-cell/cell-types/column-filter.service.ts","ng://material-dynamic-table/lib/dynamic-table.component.ts","ng://material-dynamic-table/lib/table-cell/cell.directive.ts","ng://material-dynamic-table/lib/table-cell/cell-types/text-cell.component.ts","ng://material-dynamic-table/lib/table-cell/cell-types/cell.service.ts","ng://material-dynamic-table/lib/table-cell/table-cell.component.ts","ng://material-dynamic-table/lib/column-config.model.ts","ng://material-dynamic-table/lib/table-cell/cell-types/date-cell.component.ts","ng://material-dynamic-table/lib/dynamic-table.module.ts"],"sourcesContent":["import { ColumnConfig } from './column-config.model';\n\nexport class ColumnFilter {\n    column: ColumnConfig;\n    filter: any;\n}","import { Type } from '@angular/core';\n\nexport class ColumnFilterService {\n\n    private registeredFilters: { [key: string]: Type<any>; } = {};\n    \n    registerFilter(type: string, component: Type<any>) {\n        this.registeredFilters[type] = component;\n    }\n\n    getFilter(type: string): Type<any> {\n        const component = this.registeredFilters[type];\n        \n        return component;\n    }\n}","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { MatSort, MatPaginator, MatDialog, MatDialogConfig } from '@angular/material';\nimport { DataSource } from '@angular/cdk/table';\nimport { ColumnConfig } from './column-config.model';\nimport { ColumnFilter } from './column-filter.model';\nimport { ColumnFilterService } from './table-cell/cell-types/column-filter.service';\n\n@Component({\n  selector: 'mdt-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  styleUrls: ['./dynamic-table.component.css']\n})\nexport class DynamicTableComponent implements OnInit {\n\n  @Input() columns: ColumnConfig[];\n  @Input() dataSource: DataSource<any>;\n  @Input() pageSize = 20;\n  @Input() pageSizeOptions = [20, 50, 100];\n  @Input() showFilters = true;\n  @Input() stickyHeader = false;\n  @Input() paginator: MatPaginator;\n\n  displayedColumns: string[];\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) private internalPaginator: MatPaginator;\n\n  private appliedFilters: { [key: string]: any; } = {};\n\n  constructor(private readonly columnFilterService: ColumnFilterService, private readonly dialog: MatDialog) { }\n\n  ngOnInit() {\n    if (this.dataSource == null) {\n      throw Error('DynamicTable must be provided with data source.');\n    }\n    if (this.columns == null) {\n      throw Error('DynamicTable must be provided with column definitions.');\n    }\n\n    if (this.paginator === undefined) {\n      this.paginator = this.internalPaginator;\n    }\n\n    this.displayedColumns = this.columns.map((column, index) => this.prepareColumnName(column.name, index));\n\n    const dataSource = this.dataSource as any;\n    dataSource.sort = this.sort;\n    dataSource.paginator = this.paginator;\n  }\n\n  isUsingInternalPaginator() {\n    return this.paginator === this.internalPaginator;\n  }\n\n  canFilter(column: ColumnConfig) {\n    const filter = this.columnFilterService.getFilter(column.type);\n\n    return filter != null;\n  }\n\n  isFiltered(column: ColumnConfig) {\n    return this.appliedFilters[column.name];\n  }\n\n  getFilterDescription(column: ColumnConfig) {\n    const filter = this.appliedFilters[column.name];\n    if (!filter || !filter.getDescription) {\n      return null;\n    }\n\n    return filter.getDescription();\n  }\n\n  prepareColumnName(name: string, columnNumber: number) {\n    return name || 'col' + columnNumber;\n  }\n\n  filter(column: ColumnConfig) {\n    const filter = this.columnFilterService.getFilter(column.type);\n\n    if (filter) {\n      const dialogConfig = new MatDialogConfig();\n      const columnFilter = new ColumnFilter();\n      columnFilter.column = column;\n\n      if (this.appliedFilters[column.name]) {\n        columnFilter.filter = Object.create(this.appliedFilters[column.name]);\n      }\n\n      dialogConfig.data = columnFilter;\n\n      const dialogRef = this.dialog.open(filter, dialogConfig);\n\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.appliedFilters[column.name] = result;\n        } else if (result === '') {\n          delete this.appliedFilters[column.name];\n        }\n\n        if (result || result === '') {\n          this.updateDataSource();\n        }\n      });\n    }\n  }\n\n  clearFilters() {\n    this.appliedFilters = {};\n    this.updateDataSource();\n  }\n\n  protected updateDataSource() {\n    const dataSource = this.dataSource as any;\n    dataSource.filters = this.getFilters();\n  }\n\n  getFilters() {\n    const filters = this.appliedFilters;\n    const filterArray = Object.keys(filters).map((key) => filters[key]);\n    return filterArray;\n  }\n\n  getFilter(columnName: string): any {\n    const filterColumn = this.getColumnByName(columnName);\n\n    if (!filterColumn) {\n      throw Error(`Column with name '${columnName}' does not exist.`);\n    }\n\n    return this.appliedFilters[filterColumn.name];\n  }\n\n  setFilter(columnName: string, filter: any) {\n    const filterColumn = this.getColumnByName(columnName);\n\n    if (!filterColumn) {\n      throw Error(`Cannot set filter for a column. Column with name '${columnName}' does not exist.`);\n    }\n\n    this.appliedFilters[filterColumn.name] = filter;\n    this.updateDataSource();\n  }\n\n  private getColumnByName(columnName: string): ColumnConfig {\n    return this.columns.find(c =>\n      (c.name ? c.name.toLowerCase() : c.name) === (columnName ? columnName.toLowerCase() : columnName)\n    );\n  }\n}","import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[mdtCellHost]',\n})\nexport class CellDirective {\n    constructor(public viewContainerRef: ViewContainerRef) {}\n}","import { Component, Input } from '@angular/core';\nimport { CellComponent } from './cell.component';\nimport { ColumnConfig } from '../../column-config.model';\n\n@Component({\n    selector: 'mdt-text-cell',\n    template: '{{ row[column.name] }}'\n})\nexport class TextCellComponent implements CellComponent {\n    @Input() column: ColumnConfig;\n    @Input() row: object;\n}","import { Type } from '@angular/core';\nimport { TextCellComponent } from './text-cell.component';\n\nexport class CellService {\n\n    private registeredCells: { [key: string]: Type<any>; } = {};\n    \n    registerCell(type: string, component: Type<any>) {\n        this.registeredCells[type] = component;\n    }\n\n    getCell(type: string): Type<any> {\n        const component = this.registeredCells[type];\n\n        if (component == null) {\n            return TextCellComponent;\n        }\n\n        return component;\n    }\n}","import { Component, ComponentFactoryResolver, Input, ViewChild, OnInit } from '@angular/core';\nimport { CellDirective } from './cell.directive';\nimport { CellService } from './cell-types/cell.service';\nimport { CellComponent } from './cell-types/cell.component';\nimport { ColumnConfig } from '../column-config.model';\n\n@Component({\n    selector: 'mdt-table-cell',\n    template: '<ng-template mdtCellHost></ng-template>'\n})\nexport class TableCellComponent implements OnInit {\n    @ViewChild(CellDirective) cellHost: CellDirective;\n\n    @Input() row: object;\n    @Input() column: ColumnConfig;\n\n    constructor(\n        private readonly cellService: CellService,\n        private readonly componentFactoryResolver: ComponentFactoryResolver) { }\n\n    ngOnInit() {\n        this.initCell();\n    }\n\n    initCell() {\n        const cellComponent = this.cellService.getCell(this.column.type);\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(cellComponent);\n        const viewContainerRef = this.cellHost.viewContainerRef;\n        viewContainerRef.clear();\n        const componentRef = viewContainerRef.createComponent(componentFactory);\n        const cell = componentRef.instance as CellComponent;\n        cell.row = this.row;\n        cell.column = this.column;\n    }\n}","export class ColumnConfig {\r\n    name?: string;\r\n    displayName?: string;\r\n    type: string;\r\n    options?: any;\r\n    sticky?: string;\r\n    sort?: boolean;\r\n}","import { Component, Input, OnInit } from '@angular/core';\nimport { CellComponent } from './cell.component';\nimport { ColumnConfig } from '../../column-config.model';\n\n@Component({\n    selector: 'mdt-date-cell',\n    template: '{{ row[column.name] | date:dateFormat }}'\n})\nexport class DateCellComponent implements CellComponent, OnInit {\n    @Input() column: ColumnConfig;\n    @Input() row: object;\n\n    dateFormat = 'short';\n\n    ngOnInit() {\n        if (this.column.options) {\n            if (this.column.options.dateFormat) {\n                this.dateFormat = this.column.options.dateFormat;\n            }\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  MatTableModule,\n  MatSortModule,\n  MatPaginatorModule,\n  MatIconModule,\n  MatDialogModule,\n  MatTooltipModule\n} from '@angular/material';\n\nimport { DynamicTableComponent } from './dynamic-table.component';\nimport { TableCellComponent } from './table-cell/table-cell.component';\n\nimport { CellService } from './table-cell/cell-types/cell.service';\nimport { CellDirective } from './table-cell/cell.directive';\nimport { ColumnFilterService } from './table-cell/cell-types/column-filter.service';\n\nexport { CellService, CellDirective, ColumnFilterService };\nexport { CellComponent } from './table-cell/cell-types/cell.component';\nexport { ColumnFilter } from './column-filter.model';\nexport { ColumnConfig } from './column-config.model';\nexport { FilterDescription } from './filter-description';\n\nimport { TextCellComponent } from './table-cell/cell-types/text-cell.component';\nimport { DateCellComponent } from './table-cell/cell-types/date-cell.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatIconModule,\n    MatDialogModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    DynamicTableComponent,\n    TableCellComponent,\n    CellDirective,\n    TextCellComponent,\n    DateCellComponent\n  ],\n  exports: [DynamicTableComponent],\n  entryComponents: [\n    TextCellComponent,\n    DateCellComponent\n  ],\n  providers: [\n    CellService,\n    ColumnFilterService\n  ]\n})\nexport class DynamicTableModule {\n  constructor(private readonly cellService: CellService) {\n    cellService.registerCell('string', TextCellComponent);\n    cellService.registerCell('date', DateCellComponent);\n  }\n}\n"],"names":["MatDialogConfig","Component","MatDialog","Input","ViewChild","MatSort","MatPaginator","Directive","ViewContainerRef","ComponentFactoryResolver","NgModule","CommonModule","MatTableModule","MatSortModule","MatPaginatorModule","MatIconModule","MatDialogModule","MatTooltipModule"],"mappings":";;;;;;;;;;AAEA;QAAA;SAGC;QAAD,mBAAC;IAAD,CAAC;;;;;;ACHD;QAAA;YAEY,sBAAiB,GAAkC,EAAE,CAAC;SAWjE;;;;;;QATG,4CAAc;;;;;YAAd,UAAe,IAAY,EAAE,SAAoB;gBAC7C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;aAC5C;;;;;QAED,uCAAS;;;;YAAT,UAAU,IAAY;;oBACZ,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;gBAE9C,OAAO,SAAS,CAAC;aACpB;QACL,0BAAC;IAAD,CAAC;;;;;;ACfD;QA6BE,+BAA6B,mBAAwC,EAAmB,MAAiB;YAA5E,wBAAmB,GAAnB,mBAAmB,CAAqB;YAAmB,WAAM,GAAN,MAAM,CAAW;YAbhG,aAAQ,GAAG,EAAE,CAAC;YACd,oBAAe,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;YAChC,gBAAW,GAAG,IAAI,CAAC;YACnB,iBAAY,GAAG,KAAK,CAAC;YAQtB,mBAAc,GAA4B,EAAE,CAAC;SAEyD;;;;QAE9G,wCAAQ;;;YAAR;gBAAA,iBAiBC;gBAhBC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;oBAC3B,MAAM,KAAK,CAAC,iDAAiD,CAAC,CAAC;iBAChE;gBACD,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;oBACxB,MAAM,KAAK,CAAC,wDAAwD,CAAC,CAAC;iBACvE;gBAED,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;oBAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;iBACzC;gBAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAA,CAAC,CAAC;;oBAElG,UAAU,sBAAG,IAAI,CAAC,UAAU,EAAO;gBACzC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC5B,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;aACvC;;;;QAED,wDAAwB;;;YAAxB;gBACE,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,iBAAiB,CAAC;aAClD;;;;;QAED,yCAAS;;;;YAAT,UAAU,MAAoB;;oBACtB,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;gBAE9D,OAAO,MAAM,IAAI,IAAI,CAAC;aACvB;;;;;QAED,0CAAU;;;;YAAV,UAAW,MAAoB;gBAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACzC;;;;;QAED,oDAAoB;;;;YAApB,UAAqB,MAAoB;;oBACjC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC/C,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;oBACrC,OAAO,IAAI,CAAC;iBACb;gBAED,OAAO,MAAM,CAAC,cAAc,EAAE,CAAC;aAChC;;;;;;QAED,iDAAiB;;;;;YAAjB,UAAkB,IAAY,EAAE,YAAoB;gBAClD,OAAO,IAAI,IAAI,KAAK,GAAG,YAAY,CAAC;aACrC;;;;;QAED,sCAAM;;;;YAAN,UAAO,MAAoB;gBAA3B,iBA4BC;;oBA3BO,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;gBAE9D,IAAI,MAAM,EAAE;;wBACJ,YAAY,GAAG,IAAIA,wBAAe,EAAE;;wBACpC,YAAY,GAAG,IAAI,YAAY,EAAE;oBACvC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;oBAE7B,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;wBACpC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;qBACvE;oBAED,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC;;wBAE3B,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;oBAExD,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAA,MAAM;wBACtC,IAAI,MAAM,EAAE;4BACV,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;yBAC3C;6BAAM,IAAI,MAAM,KAAK,EAAE,EAAE;4BACxB,OAAO,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;yBACzC;wBAED,IAAI,MAAM,IAAI,MAAM,KAAK,EAAE,EAAE;4BAC3B,KAAI,CAAC,gBAAgB,EAAE,CAAC;yBACzB;qBACF,CAAC,CAAC;iBACJ;aACF;;;;QAED,4CAAY;;;YAAZ;gBACE,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;;;;;QAES,gDAAgB;;;;YAA1B;;oBACQ,UAAU,sBAAG,IAAI,CAAC,UAAU,EAAO;gBACzC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aACxC;;;;QAED,0CAAU;;;YAAV;;oBACQ,OAAO,GAAG,IAAI,CAAC,cAAc;;oBAC7B,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,GAAA,CAAC;gBACnE,OAAO,WAAW,CAAC;aACpB;;;;;QAED,yCAAS;;;;YAAT,UAAU,UAAkB;;oBACpB,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;gBAErD,IAAI,CAAC,YAAY,EAAE;oBACjB,MAAM,KAAK,CAAC,uBAAqB,UAAU,sBAAmB,CAAC,CAAC;iBACjE;gBAED,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aAC/C;;;;;;QAED,yCAAS;;;;;YAAT,UAAU,UAAkB,EAAE,MAAW;;oBACjC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;gBAErD,IAAI,CAAC,YAAY,EAAE;oBACjB,MAAM,KAAK,CAAC,uDAAqD,UAAU,sBAAmB,CAAC,CAAC;iBACjG;gBAED,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;gBAChD,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;;;;;;QAEO,+CAAe;;;;;YAAvB,UAAwB,UAAkB;gBACxC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC;oBACxB,OAAA,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,IAAI,OAAO,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC;iBAAA,CAClG,CAAC;aACH;;oBA7IFC,cAAS,SAAC;wBACT,QAAQ,EAAE,mBAAmB;wBAC7B,k5CAA6C;;qBAE9C;;;;;wBANQ,mBAAmB;wBAJIC,kBAAS;;;;8BAatCC,UAAK;iCACLA,UAAK;+BACLA,UAAK;sCACLA,UAAK;kCACLA,UAAK;mCACLA,UAAK;gCACLA,UAAK;2BAILC,cAAS,SAACC,gBAAO;wCACjBD,cAAS,SAACE,qBAAY;;QA4HzB,4BAAC;KA9ID;;;;;;ACPA;QAMI,uBAAmB,gBAAkC;YAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;SAAI;;oBAJ5DC,cAAS,SAAC;wBACP,QAAQ,EAAE,eAAe;qBAC5B;;;;;wBAJmBC,qBAAgB;;;QAOpC,oBAAC;KALD;;;;;;ACFA;QAIA;SAOC;;oBAPAP,cAAS,SAAC;wBACP,QAAQ,EAAE,eAAe;wBACzB,QAAQ,EAAE,wBAAwB;qBACrC;;;6BAEIE,UAAK;0BACLA,UAAK;;QACV,wBAAC;KAPD;;;;;;ACHA;QAEA;YAEY,oBAAe,GAAkC,EAAE,CAAC;SAe/D;;;;;;QAbG,kCAAY;;;;;YAAZ,UAAa,IAAY,EAAE,SAAoB;gBAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;aAC1C;;;;;QAED,6BAAO;;;;YAAP,UAAQ,IAAY;;oBACV,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;gBAE5C,IAAI,SAAS,IAAI,IAAI,EAAE;oBACnB,OAAO,iBAAiB,CAAC;iBAC5B;gBAED,OAAO,SAAS,CAAC;aACpB;QACL,kBAAC;IAAD,CAAC;;;;;;ACpBD;QAgBI,4BACqB,WAAwB,EACxB,wBAAkD;YADlD,gBAAW,GAAX,WAAW,CAAa;YACxB,6BAAwB,GAAxB,wBAAwB,CAA0B;SAAK;;;;QAE5E,qCAAQ;;;YAAR;gBACI,IAAI,CAAC,QAAQ,EAAE,CAAC;aACnB;;;;QAED,qCAAQ;;;YAAR;;oBACU,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;;oBAC1D,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,aAAa,CAAC;;oBACvF,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB;gBACvD,gBAAgB,CAAC,KAAK,EAAE,CAAC;;oBACnB,YAAY,GAAG,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,CAAC;;oBACjE,IAAI,sBAAG,YAAY,CAAC,QAAQ,EAAiB;gBACnD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;aAC7B;;oBA3BJF,cAAS,SAAC;wBACP,QAAQ,EAAE,gBAAgB;wBAC1B,QAAQ,EAAE,yCAAyC;qBACtD;;;;;wBAPQ,WAAW;wBAFAQ,6BAAwB;;;;+BAWvCL,cAAS,SAAC,aAAa;0BAEvBD,UAAK;6BACLA,UAAK;;QAoBV,yBAAC;KA5BD;;;;;;ACNA;QAAA;SAOC;QAAD,mBAAC;IAAD,CAAC;;;;;;ACPD;QAIA;YAQI,eAAU,GAAG,OAAO,CAAC;SASxB;;;;QAPG,oCAAQ;;;YAAR;gBACI,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;oBACrB,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE;wBAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;qBACpD;iBACJ;aACJ;;oBAhBJF,cAAS,SAAC;wBACP,QAAQ,EAAE,eAAe;wBACzB,QAAQ,EAAE,0CAA0C;qBACvD;;;6BAEIE,UAAK;0BACLA,UAAK;;QAWV,wBAAC;KAjBD;;;;;;ACJA;QAwDE,4BAA6B,WAAwB;YAAxB,gBAAW,GAAX,WAAW,CAAa;YACnD,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;YACtD,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;SACrD;;oBA/BFO,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;4BACZC,uBAAc;4BACdC,sBAAa;4BACbC,2BAAkB;4BAClBC,sBAAa;4BACbC,wBAAe;4BACfC,yBAAgB;yBACjB;wBACD,YAAY,EAAE;4BACZ,qBAAqB;4BACrB,kBAAkB;4BAClB,aAAa;4BACb,iBAAiB;4BACjB,iBAAiB;yBAClB;wBACD,OAAO,EAAE,CAAC,qBAAqB,CAAC;wBAChC,eAAe,EAAE;4BACf,iBAAiB;4BACjB,iBAAiB;yBAClB;wBACD,SAAS,EAAE;4BACT,WAAW;4BACX,mBAAmB;yBACpB;qBACF;;;;;wBAvCQ,WAAW;;;QA6CpB,yBAAC;KAhCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
