import { Component, ViewChild, Input, Directive, ViewContainerRef, ComponentFactoryResolver, NgModule } from '@angular/core';
import { MatSort, MatPaginator, MatDialog, MatDialogConfig, MatTableModule, MatSortModule, MatPaginatorModule, MatIconModule, MatDialogModule, MatTooltipModule } from '@angular/material';
import '@angular/cdk/table';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColumnFilter = /** @class */ (function () {
    function ColumnFilter() {
    }
    return ColumnFilter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColumnFilterService = /** @class */ (function () {
    function ColumnFilterService() {
        this.registeredFilters = {};
    }
    /**
     * @param {?} type
     * @param {?} component
     * @return {?}
     */
    ColumnFilterService.prototype.registerFilter = /**
     * @param {?} type
     * @param {?} component
     * @return {?}
     */
    function (type, component) {
        this.registeredFilters[type] = component;
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ColumnFilterService.prototype.getFilter = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var component = this.registeredFilters[type];
        return component;
    };
    return ColumnFilterService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicTableComponent = /** @class */ (function () {
    function DynamicTableComponent(columnFilterService, dialog) {
        this.columnFilterService = columnFilterService;
        this.dialog = dialog;
        this.pageSize = 20;
        this.pageSizeOptions = [20, 50, 100];
        this.showFilters = true;
        this.stickyHeader = false;
        this.appliedFilters = {};
    }
    /**
     * @return {?}
     */
    DynamicTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dataSource == null) {
            throw Error('DynamicTable must be provided with data source.');
        }
        if (this.columns == null) {
            throw Error('DynamicTable must be provided with column definitions.');
        }
        if (this.paginator === undefined) {
            this.paginator = this.internalPaginator;
        }
        this.displayedColumns = this.columns.map(function (column, index) { return _this.prepareColumnName(column.name, index); });
        /** @type {?} */
        var dataSource = (/** @type {?} */ (this.dataSource));
        dataSource.sort = this.sort;
        dataSource.paginator = this.paginator;
    };
    /**
     * @return {?}
     */
    DynamicTableComponent.prototype.isUsingInternalPaginator = /**
     * @return {?}
     */
    function () {
        return this.paginator === this.internalPaginator;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DynamicTableComponent.prototype.canFilter = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var filter = this.columnFilterService.getFilter(column.type);
        return filter != null;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DynamicTableComponent.prototype.isFiltered = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return this.appliedFilters[column.name];
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DynamicTableComponent.prototype.getFilterDescription = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var filter = this.appliedFilters[column.name];
        if (!filter || !filter.getDescription) {
            return null;
        }
        return filter.getDescription();
    };
    /**
     * @param {?} name
     * @param {?} columnNumber
     * @return {?}
     */
    DynamicTableComponent.prototype.prepareColumnName = /**
     * @param {?} name
     * @param {?} columnNumber
     * @return {?}
     */
    function (name, columnNumber) {
        return name || 'col' + columnNumber;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DynamicTableComponent.prototype.filter = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        var _this = this;
        /** @type {?} */
        var filter = this.columnFilterService.getFilter(column.type);
        if (filter) {
            /** @type {?} */
            var dialogConfig = new MatDialogConfig();
            /** @type {?} */
            var columnFilter = new ColumnFilter();
            columnFilter.column = column;
            if (this.appliedFilters[column.name]) {
                columnFilter.filter = Object.create(this.appliedFilters[column.name]);
            }
            dialogConfig.data = columnFilter;
            /** @type {?} */
            var dialogRef = this.dialog.open(filter, dialogConfig);
            dialogRef.afterClosed().subscribe(function (result) {
                if (result) {
                    _this.appliedFilters[column.name] = result;
                }
                else if (result === '') {
                    delete _this.appliedFilters[column.name];
                }
                if (result || result === '') {
                    _this.updateDataSource();
                }
            });
        }
    };
    /**
     * @return {?}
     */
    DynamicTableComponent.prototype.clearFilters = /**
     * @return {?}
     */
    function () {
        this.appliedFilters = {};
        this.updateDataSource();
    };
    /**
     * @protected
     * @return {?}
     */
    DynamicTableComponent.prototype.updateDataSource = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dataSource = (/** @type {?} */ (this.dataSource));
        dataSource.filters = this.getFilters();
    };
    /**
     * @return {?}
     */
    DynamicTableComponent.prototype.getFilters = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var filters = this.appliedFilters;
        /** @type {?} */
        var filterArray = Object.keys(filters).map(function (key) { return filters[key]; });
        return filterArray;
    };
    /**
     * @param {?} columnName
     * @return {?}
     */
    DynamicTableComponent.prototype.getFilter = /**
     * @param {?} columnName
     * @return {?}
     */
    function (columnName) {
        /** @type {?} */
        var filterColumn = this.getColumnByName(columnName);
        if (!filterColumn) {
            throw Error("Column with name '" + columnName + "' does not exist.");
        }
        return this.appliedFilters[filterColumn.name];
    };
    /**
     * @param {?} columnName
     * @param {?} filter
     * @return {?}
     */
    DynamicTableComponent.prototype.setFilter = /**
     * @param {?} columnName
     * @param {?} filter
     * @return {?}
     */
    function (columnName, filter) {
        /** @type {?} */
        var filterColumn = this.getColumnByName(columnName);
        if (!filterColumn) {
            throw Error("Cannot set filter for a column. Column with name '" + columnName + "' does not exist.");
        }
        this.appliedFilters[filterColumn.name] = filter;
        this.updateDataSource();
    };
    /**
     * @private
     * @param {?} columnName
     * @return {?}
     */
    DynamicTableComponent.prototype.getColumnByName = /**
     * @private
     * @param {?} columnName
     * @return {?}
     */
    function (columnName) {
        return this.columns.find(function (c) {
            return (c.name ? c.name.toLowerCase() : c.name) === (columnName ? columnName.toLowerCase() : columnName);
        });
    };
    DynamicTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mdt-dynamic-table',
                    template: "<table mat-table [dataSource]=\"dataSource\"\r\n       matSort matSortDirection=\"asc\">\r\n\r\n  <ng-container *ngFor=\"let column of columns; let i = index\" matColumnDef=\"{{ prepareColumnName(column.name, i) }}\"\r\n                [sticky]=\"column.sticky === 'start'\" [stickyEnd]=\"column.sticky === 'end'\">\r\n    <th mat-header-cell *matHeaderCellDef mat-sort-header=\"{{ prepareColumnName(column.name, i) }}\" [disabled]=\"!column.name || column.sort === false\">\r\n      {{ column.displayName }}\r\n      <button class=\"mat-sort-header-button\" *ngIf=\"showFilters && canFilter(column)\"\r\n              (click)=\"filter(column); $event.stopPropagation();\"\r\n              matTooltip=\"{{ getFilterDescription(column) }}\" matTooltipDisabled=\"{{ !getFilterDescription(column) }}\">\r\n        <mat-icon color=\"{{ isFiltered(column) ? 'primary' : 'default' }}\">filter_list</mat-icon>\r\n      </button>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let row\"><mdt-table-cell [row]=\"row\" [column]=\"column\"></mdt-table-cell></td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: [stickyHeader]\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n<mat-paginator [hidden]=\"!isUsingInternalPaginator()\" [pageSize]=\"pageSize\"\r\n               [pageSizeOptions]=\"pageSizeOptions\">\r\n</mat-paginator>",
                    styles: ["table{width:100%}th .mat-icon.mat-default{opacity:.54}th .mat-icon.mat-default:hover{opacity:1}[hidden]{display:none}"]
                }] }
    ];
    /** @nocollapse */
    DynamicTableComponent.ctorParameters = function () { return [
        { type: ColumnFilterService },
        { type: MatDialog }
    ]; };
    DynamicTableComponent.propDecorators = {
        columns: [{ type: Input }],
        dataSource: [{ type: Input }],
        pageSize: [{ type: Input }],
        pageSizeOptions: [{ type: Input }],
        showFilters: [{ type: Input }],
        stickyHeader: [{ type: Input }],
        paginator: [{ type: Input }],
        sort: [{ type: ViewChild, args: [MatSort,] }],
        internalPaginator: [{ type: ViewChild, args: [MatPaginator,] }]
    };
    return DynamicTableComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CellDirective = /** @class */ (function () {
    function CellDirective(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    CellDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mdtCellHost]',
                },] }
    ];
    /** @nocollapse */
    CellDirective.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return CellDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColumnConfig = /** @class */ (function () {
    function ColumnConfig() {
    }
    return ColumnConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextCellComponent = /** @class */ (function () {
    function TextCellComponent() {
    }
    TextCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mdt-text-cell',
                    template: '{{ row[column.name] }}'
                }] }
    ];
    TextCellComponent.propDecorators = {
        column: [{ type: Input }],
        row: [{ type: Input }]
    };
    return TextCellComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CellService = /** @class */ (function () {
    function CellService() {
        this.registeredCells = {};
    }
    /**
     * @param {?} type
     * @param {?} component
     * @return {?}
     */
    CellService.prototype.registerCell = /**
     * @param {?} type
     * @param {?} component
     * @return {?}
     */
    function (type, component) {
        this.registeredCells[type] = component;
    };
    /**
     * @param {?} type
     * @return {?}
     */
    CellService.prototype.getCell = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var component = this.registeredCells[type];
        if (component == null) {
            return TextCellComponent;
        }
        return component;
    };
    return CellService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableCellComponent = /** @class */ (function () {
    function TableCellComponent(cellService, componentFactoryResolver) {
        this.cellService = cellService;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @return {?}
     */
    TableCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initCell();
    };
    /**
     * @return {?}
     */
    TableCellComponent.prototype.initCell = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cellComponent = this.cellService.getCell(this.column.type);
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(cellComponent);
        /** @type {?} */
        var viewContainerRef = this.cellHost.viewContainerRef;
        viewContainerRef.clear();
        /** @type {?} */
        var componentRef = viewContainerRef.createComponent(componentFactory);
        /** @type {?} */
        var cell = (/** @type {?} */ (componentRef.instance));
        cell.row = this.row;
        cell.column = this.column;
    };
    TableCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mdt-table-cell',
                    template: '<ng-template mdtCellHost></ng-template>'
                }] }
    ];
    /** @nocollapse */
    TableCellComponent.ctorParameters = function () { return [
        { type: CellService },
        { type: ComponentFactoryResolver }
    ]; };
    TableCellComponent.propDecorators = {
        cellHost: [{ type: ViewChild, args: [CellDirective,] }],
        row: [{ type: Input }],
        column: [{ type: Input }]
    };
    return TableCellComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateCellComponent = /** @class */ (function () {
    function DateCellComponent() {
        this.dateFormat = 'short';
    }
    /**
     * @return {?}
     */
    DateCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.column.options) {
            if (this.column.options.dateFormat) {
                this.dateFormat = this.column.options.dateFormat;
            }
        }
    };
    DateCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mdt-date-cell',
                    template: '{{ row[column.name] | date:dateFormat }}'
                }] }
    ];
    DateCellComponent.propDecorators = {
        column: [{ type: Input }],
        row: [{ type: Input }]
    };
    return DateCellComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicTableModule = /** @class */ (function () {
    function DynamicTableModule(cellService) {
        this.cellService = cellService;
        cellService.registerCell('string', TextCellComponent);
        cellService.registerCell('date', DateCellComponent);
    }
    DynamicTableModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MatTableModule,
                        MatSortModule,
                        MatPaginatorModule,
                        MatIconModule,
                        MatDialogModule,
                        MatTooltipModule
                    ],
                    declarations: [
                        DynamicTableComponent,
                        TableCellComponent,
                        CellDirective,
                        TextCellComponent,
                        DateCellComponent
                    ],
                    exports: [DynamicTableComponent],
                    entryComponents: [
                        TextCellComponent,
                        DateCellComponent
                    ],
                    providers: [
                        CellService,
                        ColumnFilterService
                    ]
                },] }
    ];
    /** @nocollapse */
    DynamicTableModule.ctorParameters = function () { return [
        { type: CellService }
    ]; };
    return DynamicTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DynamicTableComponent, CellService, CellDirective, ColumnFilterService, ColumnFilter, ColumnConfig, DynamicTableModule, DateCellComponent as ɵc, TextCellComponent as ɵb, TableCellComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,