/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Input, ViewChild } from '@angular/core';
import { CellDirective } from './cell.directive';
import { CellService } from './cell-types/cell.service';
import { ColumnConfig } from '../column-config.model';
export class TableCellComponent {
    /**
     * @param {?} cellService
     * @param {?} componentFactoryResolver
     */
    constructor(cellService, componentFactoryResolver) {
        this.cellService = cellService;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initCell();
    }
    /**
     * @return {?}
     */
    initCell() {
        /** @type {?} */
        const cellComponent = this.cellService.getCell(this.column.type);
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(cellComponent);
        /** @type {?} */
        const viewContainerRef = this.cellHost.viewContainerRef;
        viewContainerRef.clear();
        /** @type {?} */
        const componentRef = viewContainerRef.createComponent(componentFactory);
        /** @type {?} */
        const cell = (/** @type {?} */ (componentRef.instance));
        cell.row = this.row;
        cell.column = this.column;
    }
}
TableCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdt-table-cell',
                template: '<ng-template mdtCellHost></ng-template>'
            }] }
];
/** @nocollapse */
TableCellComponent.ctorParameters = () => [
    { type: CellService },
    { type: ComponentFactoryResolver }
];
TableCellComponent.propDecorators = {
    cellHost: [{ type: ViewChild, args: [CellDirective,] }],
    row: [{ type: Input }],
    column: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TableCellComponent.prototype.cellHost;
    /** @type {?} */
    TableCellComponent.prototype.row;
    /** @type {?} */
    TableCellComponent.prototype.column;
    /**
     * @type {?}
     * @private
     */
    TableCellComponent.prototype.cellService;
    /**
     * @type {?}
     * @private
     */
    TableCellComponent.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtY2VsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbC1keW5hbWljLXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3RhYmxlLWNlbGwvdGFibGUtY2VsbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsd0JBQXdCLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXhELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQU10RCxNQUFNLE9BQU8sa0JBQWtCOzs7OztJQU0zQixZQUNxQixXQUF3QixFQUN4Qix3QkFBa0Q7UUFEbEQsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtJQUFJLENBQUM7Ozs7SUFFNUUsUUFBUTtRQUNKLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7O0lBRUQsUUFBUTs7Y0FDRSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7O2NBQzFELGdCQUFnQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUM7O2NBQ3ZGLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCO1FBQ3ZELGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDOztjQUNuQixZQUFZLEdBQUcsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDOztjQUNqRSxJQUFJLEdBQUcsbUJBQUEsWUFBWSxDQUFDLFFBQVEsRUFBaUI7UUFDbkQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDOzs7WUEzQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRSx5Q0FBeUM7YUFDdEQ7Ozs7WUFQUSxXQUFXO1lBRkEsd0JBQXdCOzs7dUJBV3ZDLFNBQVMsU0FBQyxhQUFhO2tCQUV2QixLQUFLO3FCQUNMLEtBQUs7Ozs7SUFITixzQ0FBa0Q7O0lBRWxELGlDQUFxQjs7SUFDckIsb0NBQThCOzs7OztJQUcxQix5Q0FBeUM7Ozs7O0lBQ3pDLHNEQUFtRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbnB1dCwgVmlld0NoaWxkLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENlbGxEaXJlY3RpdmUgfSBmcm9tICcuL2NlbGwuZGlyZWN0aXZlJztcbmltcG9ydCB7IENlbGxTZXJ2aWNlIH0gZnJvbSAnLi9jZWxsLXR5cGVzL2NlbGwuc2VydmljZSc7XG5pbXBvcnQgeyBDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9jZWxsLXR5cGVzL2NlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IENvbHVtbkNvbmZpZyB9IGZyb20gJy4uL2NvbHVtbi1jb25maWcubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ21kdC10YWJsZS1jZWxsJyxcbiAgICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZSBtZHRDZWxsSG9zdD48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgVGFibGVDZWxsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBAVmlld0NoaWxkKENlbGxEaXJlY3RpdmUpIGNlbGxIb3N0OiBDZWxsRGlyZWN0aXZlO1xuXG4gICAgQElucHV0KCkgcm93OiBvYmplY3Q7XG4gICAgQElucHV0KCkgY29sdW1uOiBDb2x1bW5Db25maWc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjZWxsU2VydmljZTogQ2VsbFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpIHsgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuaW5pdENlbGwoKTtcbiAgICB9XG5cbiAgICBpbml0Q2VsbCgpIHtcbiAgICAgICAgY29uc3QgY2VsbENvbXBvbmVudCA9IHRoaXMuY2VsbFNlcnZpY2UuZ2V0Q2VsbCh0aGlzLmNvbHVtbi50eXBlKTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNlbGxDb21wb25lbnQpO1xuICAgICAgICBjb25zdCB2aWV3Q29udGFpbmVyUmVmID0gdGhpcy5jZWxsSG9zdC52aWV3Q29udGFpbmVyUmVmO1xuICAgICAgICB2aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xuICAgICAgICBjb25zdCBjZWxsID0gY29tcG9uZW50UmVmLmluc3RhbmNlIGFzIENlbGxDb21wb25lbnQ7XG4gICAgICAgIGNlbGwucm93ID0gdGhpcy5yb3c7XG4gICAgICAgIGNlbGwuY29sdW1uID0gdGhpcy5jb2x1bW47XG4gICAgfVxufSJdfQ==