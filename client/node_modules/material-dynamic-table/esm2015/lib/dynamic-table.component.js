/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input } from '@angular/core';
import { MatSort, MatPaginator, MatDialog, MatDialogConfig } from '@angular/material';
import { DataSource } from '@angular/cdk/table';
import { ColumnFilter } from './column-filter.model';
import { ColumnFilterService } from './table-cell/cell-types/column-filter.service';
export class DynamicTableComponent {
    /**
     * @param {?} columnFilterService
     * @param {?} dialog
     */
    constructor(columnFilterService, dialog) {
        this.columnFilterService = columnFilterService;
        this.dialog = dialog;
        this.pageSize = 20;
        this.pageSizeOptions = [20, 50, 100];
        this.showFilters = true;
        this.stickyHeader = false;
        this.appliedFilters = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.dataSource == null) {
            throw Error('DynamicTable must be provided with data source.');
        }
        if (this.columns == null) {
            throw Error('DynamicTable must be provided with column definitions.');
        }
        if (this.paginator === undefined) {
            this.paginator = this.internalPaginator;
        }
        this.displayedColumns = this.columns.map((column, index) => this.prepareColumnName(column.name, index));
        /** @type {?} */
        const dataSource = (/** @type {?} */ (this.dataSource));
        dataSource.sort = this.sort;
        dataSource.paginator = this.paginator;
    }
    /**
     * @return {?}
     */
    isUsingInternalPaginator() {
        return this.paginator === this.internalPaginator;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    canFilter(column) {
        /** @type {?} */
        const filter = this.columnFilterService.getFilter(column.type);
        return filter != null;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    isFiltered(column) {
        return this.appliedFilters[column.name];
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getFilterDescription(column) {
        /** @type {?} */
        const filter = this.appliedFilters[column.name];
        if (!filter || !filter.getDescription) {
            return null;
        }
        return filter.getDescription();
    }
    /**
     * @param {?} name
     * @param {?} columnNumber
     * @return {?}
     */
    prepareColumnName(name, columnNumber) {
        return name || 'col' + columnNumber;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    filter(column) {
        /** @type {?} */
        const filter = this.columnFilterService.getFilter(column.type);
        if (filter) {
            /** @type {?} */
            const dialogConfig = new MatDialogConfig();
            /** @type {?} */
            const columnFilter = new ColumnFilter();
            columnFilter.column = column;
            if (this.appliedFilters[column.name]) {
                columnFilter.filter = Object.create(this.appliedFilters[column.name]);
            }
            dialogConfig.data = columnFilter;
            /** @type {?} */
            const dialogRef = this.dialog.open(filter, dialogConfig);
            dialogRef.afterClosed().subscribe(result => {
                if (result) {
                    this.appliedFilters[column.name] = result;
                }
                else if (result === '') {
                    delete this.appliedFilters[column.name];
                }
                if (result || result === '') {
                    this.updateDataSource();
                }
            });
        }
    }
    /**
     * @return {?}
     */
    clearFilters() {
        this.appliedFilters = {};
        this.updateDataSource();
    }
    /**
     * @protected
     * @return {?}
     */
    updateDataSource() {
        /** @type {?} */
        const dataSource = (/** @type {?} */ (this.dataSource));
        dataSource.filters = this.getFilters();
    }
    /**
     * @return {?}
     */
    getFilters() {
        /** @type {?} */
        const filters = this.appliedFilters;
        /** @type {?} */
        const filterArray = Object.keys(filters).map((key) => filters[key]);
        return filterArray;
    }
    /**
     * @param {?} columnName
     * @return {?}
     */
    getFilter(columnName) {
        /** @type {?} */
        const filterColumn = this.getColumnByName(columnName);
        if (!filterColumn) {
            throw Error(`Column with name '${columnName}' does not exist.`);
        }
        return this.appliedFilters[filterColumn.name];
    }
    /**
     * @param {?} columnName
     * @param {?} filter
     * @return {?}
     */
    setFilter(columnName, filter) {
        /** @type {?} */
        const filterColumn = this.getColumnByName(columnName);
        if (!filterColumn) {
            throw Error(`Cannot set filter for a column. Column with name '${columnName}' does not exist.`);
        }
        this.appliedFilters[filterColumn.name] = filter;
        this.updateDataSource();
    }
    /**
     * @private
     * @param {?} columnName
     * @return {?}
     */
    getColumnByName(columnName) {
        return this.columns.find(c => (c.name ? c.name.toLowerCase() : c.name) === (columnName ? columnName.toLowerCase() : columnName));
    }
}
DynamicTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdt-dynamic-table',
                template: "<table mat-table [dataSource]=\"dataSource\"\r\n       matSort matSortDirection=\"asc\">\r\n\r\n  <ng-container *ngFor=\"let column of columns; let i = index\" matColumnDef=\"{{ prepareColumnName(column.name, i) }}\"\r\n                [sticky]=\"column.sticky === 'start'\" [stickyEnd]=\"column.sticky === 'end'\">\r\n    <th mat-header-cell *matHeaderCellDef mat-sort-header=\"{{ prepareColumnName(column.name, i) }}\" [disabled]=\"!column.name || column.sort === false\">\r\n      {{ column.displayName }}\r\n      <button class=\"mat-sort-header-button\" *ngIf=\"showFilters && canFilter(column)\"\r\n              (click)=\"filter(column); $event.stopPropagation();\"\r\n              matTooltip=\"{{ getFilterDescription(column) }}\" matTooltipDisabled=\"{{ !getFilterDescription(column) }}\">\r\n        <mat-icon color=\"{{ isFiltered(column) ? 'primary' : 'default' }}\">filter_list</mat-icon>\r\n      </button>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let row\"><mdt-table-cell [row]=\"row\" [column]=\"column\"></mdt-table-cell></td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: [stickyHeader]\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n<mat-paginator [hidden]=\"!isUsingInternalPaginator()\" [pageSize]=\"pageSize\"\r\n               [pageSizeOptions]=\"pageSizeOptions\">\r\n</mat-paginator>",
                styles: ["table{width:100%}th .mat-icon.mat-default{opacity:.54}th .mat-icon.mat-default:hover{opacity:1}[hidden]{display:none}"]
            }] }
];
/** @nocollapse */
DynamicTableComponent.ctorParameters = () => [
    { type: ColumnFilterService },
    { type: MatDialog }
];
DynamicTableComponent.propDecorators = {
    columns: [{ type: Input }],
    dataSource: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageSizeOptions: [{ type: Input }],
    showFilters: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    paginator: [{ type: Input }],
    sort: [{ type: ViewChild, args: [MatSort,] }],
    internalPaginator: [{ type: ViewChild, args: [MatPaginator,] }]
};
if (false) {
    /** @type {?} */
    DynamicTableComponent.prototype.columns;
    /** @type {?} */
    DynamicTableComponent.prototype.dataSource;
    /** @type {?} */
    DynamicTableComponent.prototype.pageSize;
    /** @type {?} */
    DynamicTableComponent.prototype.pageSizeOptions;
    /** @type {?} */
    DynamicTableComponent.prototype.showFilters;
    /** @type {?} */
    DynamicTableComponent.prototype.stickyHeader;
    /** @type {?} */
    DynamicTableComponent.prototype.paginator;
    /** @type {?} */
    DynamicTableComponent.prototype.displayedColumns;
    /** @type {?} */
    DynamicTableComponent.prototype.sort;
    /**
     * @type {?}
     * @private
     */
    DynamicTableComponent.prototype.internalPaginator;
    /**
     * @type {?}
     * @private
     */
    DynamicTableComponent.prototype.appliedFilters;
    /**
     * @type {?}
     * @private
     */
    DynamicTableComponent.prototype.columnFilterService;
    /**
     * @type {?}
     * @private
     */
    DynamicTableComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,