/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatTableModule, MatSortModule, MatPaginatorModule, MatIconModule, MatDialogModule, MatTooltipModule } from '@angular/material';
import { DynamicTableComponent } from './dynamic-table.component';
import { TableCellComponent } from './table-cell/table-cell.component';
import { CellService } from './table-cell/cell-types/cell.service';
import { CellDirective } from './table-cell/cell.directive';
import { ColumnFilterService } from './table-cell/cell-types/column-filter.service';
export { CellService, CellDirective, ColumnFilterService };
export { ColumnFilter } from './column-filter.model';
export { ColumnConfig } from './column-config.model';
import { TextCellComponent } from './table-cell/cell-types/text-cell.component';
import { DateCellComponent } from './table-cell/cell-types/date-cell.component';
export class DynamicTableModule {
    /**
     * @param {?} cellService
     */
    constructor(cellService) {
        this.cellService = cellService;
        cellService.registerCell('string', TextCellComponent);
        cellService.registerCell('date', DateCellComponent);
    }
}
DynamicTableModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MatTableModule,
                    MatSortModule,
                    MatPaginatorModule,
                    MatIconModule,
                    MatDialogModule,
                    MatTooltipModule
                ],
                declarations: [
                    DynamicTableComponent,
                    TableCellComponent,
                    CellDirective,
                    TextCellComponent,
                    DateCellComponent
                ],
                exports: [DynamicTableComponent],
                entryComponents: [
                    TextCellComponent,
                    DateCellComponent
                ],
                providers: [
                    CellService,
                    ColumnFilterService
                ]
            },] }
];
/** @nocollapse */
DynamicTableModule.ctorParameters = () => [
    { type: CellService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicTableModule.prototype.cellService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy10YWJsZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbC1keW5hbWljLXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtdGFibGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQ0wsY0FBYyxFQUNkLGFBQWEsRUFDYixrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLGVBQWUsRUFDZixnQkFBZ0IsRUFDakIsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUV2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBRXBGLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLG1CQUFtQixFQUFFLENBQUM7QUFFM0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNoRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQTZCaEYsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUM3QixZQUE2QixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUNuRCxXQUFXLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RELFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDdEQsQ0FBQzs7O1lBL0JGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixjQUFjO29CQUNkLGFBQWE7b0JBQ2Isa0JBQWtCO29CQUNsQixhQUFhO29CQUNiLGVBQWU7b0JBQ2YsZ0JBQWdCO2lCQUNqQjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1oscUJBQXFCO29CQUNyQixrQkFBa0I7b0JBQ2xCLGFBQWE7b0JBQ2IsaUJBQWlCO29CQUNqQixpQkFBaUI7aUJBQ2xCO2dCQUNELE9BQU8sRUFBRSxDQUFDLHFCQUFxQixDQUFDO2dCQUNoQyxlQUFlLEVBQUU7b0JBQ2YsaUJBQWlCO29CQUNqQixpQkFBaUI7aUJBQ2xCO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxXQUFXO29CQUNYLG1CQUFtQjtpQkFDcEI7YUFDRjs7OztZQXZDUSxXQUFXOzs7Ozs7O0lBeUNOLHlDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQge1xuICBNYXRUYWJsZU1vZHVsZSxcbiAgTWF0U29ydE1vZHVsZSxcbiAgTWF0UGFnaW5hdG9yTW9kdWxlLFxuICBNYXRJY29uTW9kdWxlLFxuICBNYXREaWFsb2dNb2R1bGUsXG4gIE1hdFRvb2x0aXBNb2R1bGVcbn0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBEeW5hbWljVGFibGVDb21wb25lbnQgfSBmcm9tICcuL2R5bmFtaWMtdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IFRhYmxlQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vdGFibGUtY2VsbC90YWJsZS1jZWxsLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IENlbGxTZXJ2aWNlIH0gZnJvbSAnLi90YWJsZS1jZWxsL2NlbGwtdHlwZXMvY2VsbC5zZXJ2aWNlJztcbmltcG9ydCB7IENlbGxEaXJlY3RpdmUgfSBmcm9tICcuL3RhYmxlLWNlbGwvY2VsbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ29sdW1uRmlsdGVyU2VydmljZSB9IGZyb20gJy4vdGFibGUtY2VsbC9jZWxsLXR5cGVzL2NvbHVtbi1maWx0ZXIuc2VydmljZSc7XG5cbmV4cG9ydCB7IENlbGxTZXJ2aWNlLCBDZWxsRGlyZWN0aXZlLCBDb2x1bW5GaWx0ZXJTZXJ2aWNlIH07XG5leHBvcnQgeyBDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi90YWJsZS1jZWxsL2NlbGwtdHlwZXMvY2VsbC5jb21wb25lbnQnO1xuZXhwb3J0IHsgQ29sdW1uRmlsdGVyIH0gZnJvbSAnLi9jb2x1bW4tZmlsdGVyLm1vZGVsJztcbmV4cG9ydCB7IENvbHVtbkNvbmZpZyB9IGZyb20gJy4vY29sdW1uLWNvbmZpZy5tb2RlbCc7XG5leHBvcnQgeyBGaWx0ZXJEZXNjcmlwdGlvbiB9IGZyb20gJy4vZmlsdGVyLWRlc2NyaXB0aW9uJztcblxuaW1wb3J0IHsgVGV4dENlbGxDb21wb25lbnQgfSBmcm9tICcuL3RhYmxlLWNlbGwvY2VsbC10eXBlcy90ZXh0LWNlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGVDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi90YWJsZS1jZWxsL2NlbGwtdHlwZXMvZGF0ZS1jZWxsLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgTWF0VGFibGVNb2R1bGUsXG4gICAgTWF0U29ydE1vZHVsZSxcbiAgICBNYXRQYWdpbmF0b3JNb2R1bGUsXG4gICAgTWF0SWNvbk1vZHVsZSxcbiAgICBNYXREaWFsb2dNb2R1bGUsXG4gICAgTWF0VG9vbHRpcE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBEeW5hbWljVGFibGVDb21wb25lbnQsXG4gICAgVGFibGVDZWxsQ29tcG9uZW50LFxuICAgIENlbGxEaXJlY3RpdmUsXG4gICAgVGV4dENlbGxDb21wb25lbnQsXG4gICAgRGF0ZUNlbGxDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW0R5bmFtaWNUYWJsZUNvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIFRleHRDZWxsQ29tcG9uZW50LFxuICAgIERhdGVDZWxsQ29tcG9uZW50XG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIENlbGxTZXJ2aWNlLFxuICAgIENvbHVtbkZpbHRlclNlcnZpY2VcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljVGFibGVNb2R1bGUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNlbGxTZXJ2aWNlOiBDZWxsU2VydmljZSkge1xuICAgIGNlbGxTZXJ2aWNlLnJlZ2lzdGVyQ2VsbCgnc3RyaW5nJywgVGV4dENlbGxDb21wb25lbnQpO1xuICAgIGNlbGxTZXJ2aWNlLnJlZ2lzdGVyQ2VsbCgnZGF0ZScsIERhdGVDZWxsQ29tcG9uZW50KTtcbiAgfVxufVxuIl19